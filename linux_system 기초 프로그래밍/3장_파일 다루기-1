시스템 호출(system call), 표준 라이브러리 함수
(Standard Library Function)
  사용
파일을 다루기 위한 시스템 호출/표준 라이브러리 함수
    함수    의미
    open    이미 존재하는 파일을 읽기 또는 쓰기용으로 열거나, 새로운 파일을 생성하여 연다.
    creat   새로운 파일을 생성하여 연다.
    close   open 또는 creat로 열려진 파일을 닫는다.
    read    열려진 파일로부터 데이터를 읽어 들인다.
    write   열려진 파일에 데이터를 쓴다.
    lseek   파일 안에서 읽기/쓰기 포인터를 지정한 바이트 위치로 이동한다.
    unlink/remove   파일을 삭제한다.
    
/* program ex03-01.c */ 
02 #include <sys/types.h> 
03 #include <fcntl.h> 
04 #include <unistd.h> 
05
06 main() 
07 { 
08 int filedes, fdnew1, fdnew2; // 파일 기술자로 사용된다.
09 ssize_t nread; 
10 off_t newpos; 
11
12 char buffer[1024]; // 읽어 들인 파일의 내용을 저장한 배열
13 char content[] = "Hello my 
friend!!\n"; 
14
15 filedes = open("data.txt", O_RDWR); //data.tat 파일을 연다
16
17 nread = read(filedes, buffer, 1024);// buffer 크기만큼 파일을 읽는다
18 printf("%s",buffer);// buffer의 내용을 출력한다
19
20
21 write(filedes, content, strlen(content)); // 배열 content의 내용을 파일에 적는다.
22
23 newpos = lseek(filedes, (off_t)0, SEEK_SET); // 읽기/쓰기 포인터를 이동한다.
24 nread = read(filedes, buffer, 1024); // 파일의 내용을 읽는다.
25 printf("%s", buffer); 
26
27 close(filedes); // 개방된 파일을 닫는다.
28
29 fdnew1 = open("newdata1.txt", O_RDWR |O_CREAT, 0644); // 새로운 파일을 생성하여 연다.
30 fdnew2 = creat("newdata2.txt", 0644); // 새로운 파일을 생성하여 연다.
31
32 close(fdnew1); close(fdnew2); 
33 unlink("newdata2.txt");// 파일을 삭제한다.
34}

data.txt의 내용

$ cat data.txt (1) data.txt 파일의 크기는 몇 바이트인가?
Hello my world!! (2) data.txt 파일의 내용을 ASCII 코드 값으로읽을 수 있는가?
$

실행 결과

$ ex03-01 
Hello my world!! (1) 실행 결과의 각 라인의 예제 프로그램의 몇 번째 라인에 의한 결과인지 생각해보자.
Hello my world!! 
Hello my friend!! 
$ 

파일을 다루는 프로그램을 작성할 때 반드시 알아야 하는 개념

파일 기술자(file descriptor)

실행중인 프로그램과 하나의 파일 사이에 연결된 개방 상태
음수가 아닌 정수형 값으로 시스템이 결정
프로그램 작성 시 실제 값이 무엇인지 알 필요 없음
파일 개방이 실패하면 -1이 됨
커널에 의해서 관리

하나의 프로그램은 동시에 여러 개의 파일을 개방할 수 있다.
여러 개의 프로그램이 동시에 하나의 파일을 개방할 수 있다.
어떤 경우든 커널에 의해서 각 개방상태가 유일하게 식별되어 관리된다.

읽기/쓰기 포인터 (read/write pointer)

개방된 파일 내에서 읽기 작업이나 쓰기 작업을 수행할 바이트 단위의 위치
특정 위치를 기준으로 한 상대적인 위치를 의미
그래서 오프셋(offset)이라고 한다.
파일을 개방한 직후에 읽기/쓰기 포인터는 0
파일의 첫 번째 바이트를 가리킨다.
파일의 내용을 읽거나 파일에 새로운 데이터를 작성하면 그 만큼 증가한다.
파일 기술자마다 하나씩 존재
서로 다른 프로그램이 동일한 파일을 개방해도 파일 기술자가 다르기 때문에 마찬가지로
서로 다른 읽기/쓰기 포인터를 가진다.
즉, 서로의 작업이 상대에게 영향을 주지 않는다.

기존의 파일을 개방하거나 새로운 파일을 생성한 후에 개방한다.

#include <sys/types.h> 
#include <sys/stat.h> 
#include <fcntl.h> 

int open(const char *pathname, int flags, [mode_t mode]); 

pathname  |  개방할 파일의 경로 이름을 가지고 있는 문자열의 포인터이다. 
flags  | 파일의 개방 방식을 지정한다. 
mode | 대부분의 경우 생략할 수 있는 값으로 새롭게 생성하는 파일의 초기 접근 권한을 지정한다. 
반환값 | 정상적으로 파일을 개방하게 되면 파일 기술자를 반환하게 된다. 파일 개방이 실패할 경우 -1을 반환한다. 

이미 존재하는 파일을 개방하려면 반드시 open을 사용한다.
새로운 파일을 생성할 때는 open이나 creat를 사용한다.

*pathname
개방하려는 파일의 경로 이름
-상대 경로, 절대 경로
-문자열 상수, 문자열형의 포인터

* 절대 경로로 지정 */ 
filedes = open("/home/lsp/data.txt", O_RDONLY); 
/* 상대 경로로 지정 */ 
filedes = open("data.txt", O_RDONLY); 
… 
/* 문자열을 담고 있는 배열 */ 
char pathname[] = "data.txt"; 
/* 배열의 포인터로 경로를 지정 */ 
filedes = open(pathname, O_RDONLY);

flags
파일을 개방하고 난 후의 접근 방식
-읽기 전용, 쓰기 전용, 읽기 쓰기용

O_RDONLY 읽기만 가능한 상태로 접근한다.
O_WRONLY 쓰기만 가능한 상태로 접근한다.
O_RDWR 읽기, 쓰기 모두 가능한 상태로 접근한다.

mode
파일의 접근 권한을 의미한다.
이미 존재하는 파일을 개방하여 사용할 경우 생략한다.
새로운 파일을 생성할 때 적용한다.

반환값

호출이 성공하면 음이 아닌 정수형의 값을 반환한다.
-파일 기술자

프로그램 내에서 파일 기술자는 중복되지 않는다.
-0, 1, 2는 반환값으로 나타나지 않는다.
  -0, 1, 2는 각각 표준 입력, 표준 출력, 표준 에러로 사용된다.

반환값이 -1이면 파일 개방에 실패했다.
-지정한 파일이 존재하지 않는다.
-접근 권한이 없다.
