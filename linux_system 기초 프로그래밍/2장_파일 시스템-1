*파일 시스템의 구조

부트 블록 (boot block)
운영체제를 부팅시키기 위한 코드가 저장되어 있다.

슈퍼 블록 (super block)
파일 시스템과 관련된 정보를 저장하고 있다.

아이노드 블록 (inode blocks)
파일에 대한 정보를 저장하고 있다.
모든 파일은 반드시 아이노드 블록을 하나 가지고 있다.

데이터 블록 (data blocks)
파일이 보관해야 하는 데이터를 저장하고 있다.
보관하는 데이터의 크기에 따라 여러 개일 수 있다.

$ cat > temp 
apple is red  ///데이터 블록에 저장됨
banana is yellow 
$ ls -l temp 
-rw-r--r-- 1 kimyh graduate 30 Nov 18 16:54 temp //아이노드 블록에 저장됨

*파일 

시스템 차원에서 데이터를 저장하기 위한 가장 기본적인 단위

리눅스에서 파일은 단순히 바이너리(2진) 데이터의 흐름을 저장하고 있다.
-저장된 데이터는 논리적인 구조가 정해져 있지 않다.
-논리적인 구조는 프로그램에 의해 결정된다.

파일의 예
$ cat > data 
ACD 
^D 
$ cat data 
ACD 
$ 

-data 파일은 총 4바이트의 데이터를 저장하고 있음
-텍스트 파일이라고 가정
문자 A, C, D와 개행문자를 저장하고 있음
-2진 파일이라고 가정
숫자형 값인 65, 67, 68, 10을 저장하고 있음

cat으로 바이너리 파일을 표준 출력하는 예
-cat은 지정한 파일의 내용을 문자로 인식하여 터미널 화면으로 출력한다.
아래의 예는 실행 파일인 바이너리 파일을 cat으로 표준 출력하는 예이다.

-바이너리 파일은 문자 코드에 해당하지 않는 2진 값도 문자로 가정하므로
아래와 같이 의미 없는 글자들이 찍히게 된다.

$ cat three 
d.1__do_global_dtors_aux__EH_FRAME_BEGIN__fini_dummyobject.2frame_dummy
init_dummyforce_to_data__CTOR_LIST____do_global_ctors_aux__CTOR_END____
DTOR_END____FRAME_END__one.ctwo.c_DYNAMIC__register_frame_info@@GLIBC_2
.0_fp_hw_init__deregister_frame_info@@GLIBC_2.0_start__bss_startmain__l
ibc_start_main@@GLIBC_2.0data_startprintf@@GLIBC_2.0_finiprintmsg_edata
_GLOBAL_OFFSET_TABLE__end_IO_stdin_used__data_start__gmon_start__ $ 
$ 

디렉터리 (directory)
파일의 목록을 저장하기 위한 특수한 형태의 파일이다.
디렉터리 파일이라고 부르기도 함
디렉터리 파일의 데이터 블록에 파일명이 목록으로 저장되어 있다.

디렉터리 항 (directory entry)
디렉터리 파일의 목록을 항 이라고 한다.
모든 디렉터리는 항상 두개의 항을 가지고 있다.
  -자기 자신을 나타내는 항(.)
  -부모 디렉터리를 나타내는 항(..)

$ ls -la 
2845303 drwxr-xr-x 2 kimyh graduate 4096 Nov 18 17:39 . 
3139591 drwxr-xr-x 3 kimyh graduate 4096 Nov 18 17:39 ..  
2845304 -rw-r--r--1 kimyh graduate 13 Nov 18 17:44 file 
$ 
아이노드 블록 번호

1) 현재 디렉터리 파일의 아이노드 블록의 번호는 2845303이다.
2) 부모 디렉터리 파일의 아이노드 블록의 번호는 3139591이다.
3) 현재 디렉터리에 등록되어 있는 file 파일의 아이노드 블록의 번호는
2845304이다.

ls 명령이 수행되는 과정
  ls명령은 지정한 디렉터리의 디렉터리 항을 출력한다.
  그 과정은 다음과 같다.
1. 현재 디렉터리의 데이터 블록에서 항을 하나 읽는다. 
2. 읽어 들인 디렉터리 항으로부터 아이노드 번호와 파일 이름을 구한다. 
3. 아이노드 번호로 아이노드 블록을 지정하여 필요한 정보를 가져온다. 
4. 정보를 출력한다. 
5. 현재 디렉터리의 데이터 블록에서 다음 항을 읽고 2번에서 4번의 과정을
반복한다. 

※위의 모든 과정이 ls 명령에 의해서만 이루어지는 것이 아니다. 리눅스 시스템의 커널
의 도움으로 파일의 정보를 가져오게 된다.

디렉터리 파일의 실제 내용
-지정한 파일의 데이터 블록의 내용을 바이트 단위로 표준 출력한다.
-기본적으로 바이트의 값을 8진수로 출력한다.

$ ls -lai 
119271 drwxr-xr-x 2 kimyh graduate 512 Nov 18 17:55 ./ 
15552 drwxr-xr-x 5 kimyh graduate 512 Nov 18 17:54 ../ 
119272 -rw-r--r-- 1 kimyh graduate 13 Nov 18 17:55 file 
119273 -rw-r--r-- 1 kimyh graduate 14 Nov 18 17:55 text 
$ od -c . 
0000000 \0 001 321 347 \0 \f \0 001 . \0 \0 \0 \0 \0 < 300 
0000020 \0 \f \0 002 . . \0 \0 \0 001 321 350 \0 020 \0 004 
0000040 f i l e \0 \0 \0 \0 \0 001 321 351 001 330 \0 004 
0000060 t e x t \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 
0000100 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 
* 
0001000 
$ 


